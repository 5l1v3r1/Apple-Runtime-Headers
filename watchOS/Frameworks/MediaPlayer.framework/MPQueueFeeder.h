//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <MediaPlayer/MPQueueBehaviorManaging-Protocol.h>
#import <MediaPlayer/NSSecureCoding-Protocol.h>

@class MPModelPlayEvent, MSVMutableBidirectionalDictionary, NSData, NSDictionary, NSMutableDictionary, NSString;
@protocol MPQueueFeederDelegate;

@interface MPQueueFeeder : NSObject <MPQueueBehaviorManaging, NSSecureCoding>
{
    int _repeatType;
    int _shuffleType;
    NSMutableDictionary *_nextStartTimes;
    MSVMutableBidirectionalDictionary *_exportableItemIDs;
    _Bool _requiresQueueChangeVerification;
    id <MPQueueFeederDelegate> _delegate;
    unsigned int _state;
    NSString *_playActivityFeatureName;
    NSData *_playActivityRecommendationData;
    NSString *_siriReferenceIdentifier;
    NSDictionary *_siriWHAMetricsInfo;
    NSString *_playbackContextUniqueIdentifier;
    int _activeShuffleType;
    NSString *_uniqueIdentifier;
    MPModelPlayEvent *_modelPlayEvent;
    CDStruct_e0453228 _skipLimit;
}

+ (_Bool)supportsSecureCoding;
+ (_Bool)supportsStateRestoration;
@property(readonly, nonatomic) MPModelPlayEvent *modelPlayEvent; // @synthesize modelPlayEvent=_modelPlayEvent;
@property(readonly, nonatomic) NSString *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(nonatomic) int activeShuffleType; // @synthesize activeShuffleType=_activeShuffleType;
@property(nonatomic) int shuffleType; // @synthesize shuffleType=_shuffleType;
@property(nonatomic) int repeatType; // @synthesize repeatType=_repeatType;
@property(copy, nonatomic) NSString *playbackContextUniqueIdentifier; // @synthesize playbackContextUniqueIdentifier=_playbackContextUniqueIdentifier;
@property(copy, nonatomic) NSDictionary *siriWHAMetricsInfo; // @synthesize siriWHAMetricsInfo=_siriWHAMetricsInfo;
@property(copy, nonatomic) NSString *siriReferenceIdentifier; // @synthesize siriReferenceIdentifier=_siriReferenceIdentifier;
@property(copy, nonatomic) NSData *playActivityRecommendationData; // @synthesize playActivityRecommendationData=_playActivityRecommendationData;
@property(copy, nonatomic) NSString *playActivityFeatureName; // @synthesize playActivityFeatureName=_playActivityFeatureName;
@property(nonatomic) CDStruct_e0453228 skipLimit; // @synthesize skipLimit=_skipLimit;
@property(nonatomic) _Bool requiresQueueChangeVerification; // @synthesize requiresQueueChangeVerification=_requiresQueueChangeVerification;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
@property(nonatomic) __weak id <MPQueueFeederDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (_Bool)player:(id)arg1 shouldContinuePlaybackForNetworkType:(int)arg2 returningError:(id *)arg3;
- (void)player:(id)arg1 currentItemDidChangeToItem:(id)arg2;
- (void)player:(id)arg1 currentItemWillChangeFromItem:(id)arg2;
- (id)pathAtIndex:(unsigned int)arg1;
- (id)localizedPositionInPlaylistString:(id)arg1;
- (id)localizedAttributedPositionInPlaylistStringForItem:(id)arg1 withRegularTextAttributes:(id)arg2 emphasizedTextAttributes:(id)arg3;
- (id)playbackInfoForIdentifier:(id)arg1;
- (_Bool)_canPurgeNextStartTimes;
- (void)invalidateRealShuffleType;
- (void)invalidateRealRepeatType;
- (void)invalidateAssets;
- (void)contentsDidChangeWithReplacementPlaybackContext:(id)arg1;
- (void)contentsDidChangeWithPreferredStartIndex:(unsigned int)arg1 error:(id)arg2;
- (void)contentsDidChangeWithPreferredStartIndex:(unsigned int)arg1;
- (id)mediaItemForIdentifier:(id)arg1;
- (id)mediaItemAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfMediaItem:(id)arg1;
- (id)metadataItemForIdentifier:(id)arg1;
- (id)itemForIndex:(unsigned int)arg1;
@property(readonly, nonatomic) unsigned int itemCount;
- (unsigned int)initialPlaybackQueueDepthForStartingIndex:(unsigned int)arg1;
- (id)identifierAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfItemWithIdentifier:(id)arg1;
- (id)itemForIdentifier:(id)arg1;
- (id)_itemForIndex:(int)arg1 queueIdentifier:(id)arg2;
- (_Bool)hasItemForIndex:(unsigned int)arg1;
- (id)audioSessionModeForItemAtIndex:(unsigned int)arg1;
@property(readonly, nonatomic) int realShuffleType;
@property(readonly, nonatomic) int realRepeatType;
- (_Bool)hasValidItemAtIndex:(unsigned int)arg1;
- (id)copyRawItemAtIndex:(unsigned int)arg1;
- (void)applyVolumeNormalizationForItem:(id)arg1;
- (_Bool)isPlaceholderItemForQueueIdentifier:(id)arg1;
- (void)generateContentIDForItem:(id)arg1;
- (id)contentItemIDForQueueItemID:(id)arg1;
- (id)contentItemIDAtIndex:(int)arg1;
- (int)indexForItemID:(id)arg1;
- (id)itemIDAtIndex:(int)arg1;
- (id)itemForItemID:(id)arg1;
- (id)queueIdentifierForItemID:(id)arg1;
@property(readonly, nonatomic) _Bool userCanChangeShuffleAndRepeatType;
- (id)preferredLanguages;
@property(readonly, nonatomic) _Bool playerPreparesItemsForPlaybackAsynchronously;
@property(readonly, nonatomic) int playbackMode;
- (int)itemTypeForIndex:(unsigned int)arg1;
@property(readonly, nonatomic) Class itemClass;
- (_Bool)canSkipToPreviousItemForItem:(id)arg1;
@property(readonly, nonatomic) _Bool canSkipToPreviousItem;
- (_Bool)canSkipItem:(id)arg1;
@property(readonly, nonatomic) _Bool canSeek;
@property(readonly, nonatomic) _Bool canReorder;
@property(readonly, nonatomic) _Bool allowsUserVisibleUpcomingItems;
@property(readonly, nonatomic) _Bool allowsQueueResetWhenReachingEnd;
- (_Bool)shouldBeginPlaybackOfItem:(id)arg1 error:(id *)arg2;
- (id)errorResolverForItem:(id)arg1;
- (void)reloadWithPlaybackContext:(id)arg1 requireFinalTracklist:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)reloadWithPlaybackContext:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)shuffleItemsWithAnchor:(unsigned int *)arg1;
- (void)setNextStartTime:(double)arg1 forIndentifier:(id)arg2;
- (_Bool)shouldReuseQueueFeederForPlaybackContext:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (void)restoreState:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

