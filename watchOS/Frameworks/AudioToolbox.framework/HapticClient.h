//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSXPCListenerDelegate.h"

@class NSArray, NSString, NSXPCConnection;

__attribute__((visibility("hidden")))
@interface HapticClient : NSObject <NSXPCListenerDelegate>
{
    NSXPCConnection *_connection;
    struct unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller>> _syncCaller;
    struct HapticSharedMemory _sharedBuffer;
    unsigned int _uniqueID;
    int _serverTimeout;
    CDUnknownBlockType _connectionCallback;
    _Bool _prewarmed;
    _Bool _running;
    _Bool _connected;
    id <ServerInterface> _serverDelegate;
    unsigned int _clientID;
    NSArray *_channelKeys;
    int _serverProcessID;
}

@property int serverProcessID; // @synthesize serverProcessID=_serverProcessID;
@property(copy) CDUnknownBlockType connectionCallback; // @synthesize connectionCallback=_connectionCallback;
@property _Bool connected; // @synthesize connected=_connected;
@property(readonly) _Bool running; // @synthesize running=_running;
@property(readonly) _Bool prewarmed; // @synthesize prewarmed=_prewarmed;
@property(readonly) NSArray *channelKeys; // @synthesize channelKeys=_channelKeys;
@property(readonly) unsigned int clientID; // @synthesize clientID=_clientID;
@property(retain) id <ServerInterface> serverDelegate; // @synthesize serverDelegate=_serverDelegate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)destroySharedMemory;
- (long)setupSharedMemory:(id)arg1 size:(unsigned int)arg2;
- (void)handleServerConnectionInvalidation;
- (void)handleServerConnectionInterruption;
- (_Bool)setNumberOfChannels:(unsigned int)arg1 error:(id *)arg2;
- (_Bool)setPlayerBehavior:(unsigned int)arg1 error:(id *)arg2;
- (void)setChannelKeys:(id)arg1;
- (void)disconnect;
- (id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (_Bool)setupConnectionAndReturnError:(id *)arg1;
- (void)doInit;
- (void)releaseResources;
- (_Bool)detachHapticSequence:(unsigned int)arg1 atTime:(double)arg2;
- (_Bool)setSequenceParameter:(unsigned int)arg1 atTime:(double)arg2 value:(float)arg3 sequenceID:(unsigned int)arg4 channel:(unsigned int)arg5;
- (_Bool)stopHapticSequence:(unsigned int)arg1 atTime:(double)arg2;
- (_Bool)startHapticSequence:(unsigned int)arg1 atTime:(double)arg2 withOffset:(double)arg3;
- (_Bool)enableSequenceLooping:(unsigned int)arg1 enable:(_Bool)arg2 error:(id *)arg3;
- (_Bool)prepareHapticSequence:(unsigned int)arg1 error:(id *)arg2;
- (_Bool)loadHapticPattern:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (_Bool)loadHapticSequence:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (_Bool)setParameter:(unsigned int)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned int)arg4;
- (_Bool)clearEventsFromTime:(double)arg1 channel:(unsigned int)arg2;
- (_Bool)stopEventWithToken:(unsigned int)arg1 atTime:(double)arg2 channel:(unsigned int)arg3;
- (_Bool)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned int)arg3 outToken:(unsigned int *)arg4 error:(id *)arg5;
- (_Bool)startEventAndReturnToken:(unsigned int)arg1 type:(unsigned int)arg2 atTime:(double)arg3 channel:(unsigned int)arg4 eventToken:(unsigned int *)arg5;
- (_Bool)setChannelEventBehavior:(unsigned int)arg1 channel:(unsigned int)arg2;
- (_Bool)finish:(CDUnknownBlockType)arg1;
- (void)stopRunning;
- (void)startRunning:(CDUnknownBlockType)arg1;
- (void)stopPrewarm;
- (void)prewarm:(CDUnknownBlockType)arg1;
- (_Bool)loadHapticEvent:(id)arg1 reply:(CDUnknownBlockType)arg2;
- (void)allocateResources:(CDUnknownBlockType)arg1;
@property(readonly) double hapticLatency;
- (void)dealloc;
- (id)initAndReturnError:(id *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

