//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BayesianModel {
    struct _opaque_pthread_rwlock_t {
        long __sig;
        char __opaque[124];
    } m_rwlock;
    struct unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::__1::allocator<std::__1::pair<const unsigned long long, Gaussian>>> m_features;
    int m_nFeaturesCount;
    unsigned long long m_nTotalTrue;
    unsigned long long m_nTotalExamples;
    double m_dSumPredictions;
    double m_dLogScore;
    double m_dNormalizedLogScore;
    int m_nModelVersion;
    unsigned long long m_nCalibrationCurveTrue[10];
    unsigned long long m_nCalibrationCurveCount[10];
    unsigned long m_nNumberOfTraining;
    struct Gaussian m_empty;
};

struct CATransform3D {
    float m11;
    float m12;
    float m13;
    float m14;
    float m21;
    float m22;
    float m23;
    float m24;
    float m31;
    float m32;
    float m33;
    float m34;
    float m41;
    float m42;
    float m43;
    float m44;
};

struct CGAffineTransform {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct CGColor;

struct CGPathElement {
    int _field1;
    struct CGPoint *_field2;
};

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct CGVector {
    float dx;
    float dy;
};

struct CLLocationCoordinate2D {
    double latitude;
    double longitude;
};

struct CharacterPoseSpecs {
    float bodyOffsetX;
    float footOffsetX;
    float headOffsetX;
};

struct CharacterStateSpecs {
    unsigned int bodyTexIdx;
    unsigned int minuteTexIdx;
    unsigned int hourArmOnLeftShoulder;
    float xFlipBody;
    float xFlipFoot;
    float xFlipFace;
    float xFlipMinuteHand;
    float xFlipHourHand;
    float leftShoulderX;
    float rightShoulderX;
    float minuteElbowBend;
    float hourElbowBend;
};

struct Gaussian {
    double m_dPrecision;
    double m_dPredicionMean;
};

struct LabelPosition {
    struct CGPoint _field1;
    int _field2;
    int _field3;
};

struct NSArray {
    Class _field1;
};

struct NSNumber {
    Class _field1;
};

struct NSString {
    Class _field1;
};

struct NTKAstronomyFaceViewAnimationPose {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
};

struct NTKAstronomyInteractionSettings {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct NTKCharacterPrograms {
    struct NUProgram programs[6];
};

struct NTKKaleidoscopePathfinderPoint {
    float _field1[4];
};

struct NUProgram {
    unsigned int program;
    int uniforms[11];
};

struct RingLayout {
    float bottomEdgeInset;
    float leftEdgeInset;
    float diameter;
    float thickness;
    float interspacing;
};

struct UIEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct _NSRange {
    unsigned int _field1;
    unsigned int _field2;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*> *__next_;
};

struct array<NTKFeatureValue, 22> {
    CDUnion_a867fccf __elems_[22];
};

struct bitset<22> {
    unsigned int __first_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>> {
                unsigned long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<unsigned long long, Gaussian, BayesianModel::SuperHasher, BayesianModel::SuperHasher, std::__1::allocator<std::__1::pair<const unsigned long long, Gaussian>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, Gaussian>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, Gaussian>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, Gaussian>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, true>> {
            unsigned long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, Gaussian>, BayesianModel::SuperHasher, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool isComplexBackground;
    _Bool isColoredText;
    float textHue;
    float textSaturation;
    float textBrightness;
    float bgHue;
    float bgSaturation;
    float bgBrightness;
    float shadowHue;
    float shadowSaturation;
    float shadowBrightness;
} CDStruct_77693742;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
} CDStruct_869f9c67;

typedef struct {
    struct CGColor *colors[3];
    int frameIndexes[3];
    struct CATransform3D transforms[3];
} CDStruct_ea8e80e6;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
    float _field7;
    float _field8;
    float _field9;
    float _field10;
    float _field11;
    float _field12;
    struct UIEdgeInsets _field13;
} CDStruct_4eca2615;

// Ambiguous groups
typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *_field1;
    } _field3;
} vector_cfeb9b06;

#pragma mark Named Unions

union _GLKMatrix4 {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
};

union _GLKVector2 {
    struct {
        float x;
        float y;
    } ;
    struct {
        float s;
        float t;
    } ;
    float v[2];
};

union _GLKVector3 {
    CDStruct_869f9c67 _field1;
    CDStruct_869f9c67 _field2;
    CDStruct_869f9c67 _field3;
    float _field4[3];
};

#pragma mark Typedef'd Unions

typedef union {
    unsigned int intValue;
    float floatValue;
} CDUnion_a867fccf;

