//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <QuickLookUI/NSPasteboardWriting-Protocol.h>
#import <QuickLookUI/QLAccessibilityUIElementDelegate-Protocol.h>
#import <QuickLookUI/QLDisplayable-Protocol.h>
#import <QuickLookUI/QLPreviewPageNavigationDataSource-Protocol.h>
#import <QuickLookUI/QLTimeSliderDataSource-Protocol.h>

@class CALayer, DMFApplicationPolicyMonitor, DMFCategoryPolicyMonitor, NSArray, NSDictionary, NSMutableArray, NSResponder, NSString, NSTouchBar, NSURL, NSUUID, NSView, QLDisplayBundleViewController, QLPreview;
@protocol QLDisplayBundleOwner, QLPreviewItem;

@interface QLDisplayBundle : NSObject <QLAccessibilityUIElementDelegate, QLPreviewPageNavigationDataSource, QLTimeSliderDataSource, QLDisplayable, NSPasteboardWriting>
{
    QLPreview *_preview;
    id <QLDisplayBundleOwner> _owner;
    NSMutableArray *_accessoryControllers;
    int _activation;
    int _visibility;
    NSUUID *_operationUUID;
    int _activationCount;
    BOOL _isObservingOwner;
    QLDisplayBundleViewController *_qlViewController;
    NSArray *_invalidModes;
    BOOL _inMarkup;
    BOOL _documentDirty;
    long long _currentScreentimePolicy;
    DMFCategoryPolicyMonitor *_screentimeCategoryPolicyMonitor;
    DMFApplicationPolicyMonitor *_screentimeApplicationPolicyMonitor;
}

+ (id)newPreviewDocumentDisplayBundleForPreview:(id)arg1;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest *)arg1 withURL:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5;
+ (BOOL)generateThumbnail:(struct __QLThumbnailRequest *)arg1 withData:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5;
+ (id)imageForScreenshotKey:(id)arg1;
+ (id)_pathOfScreenshotWithKey:(id)arg1;
+ (id)keyPathsForValuesAffectingHasZooming;
+ (id)keyPathsForValuesAffectingHasScrolling;
+ (id)keyPathsForValuesAffectingPlayedToTheEnd;
+ (id)keyPathsForValuesAffectingHasTime;
+ (id)screentimeTimeoutError;
+ (id)keyPathsForValuesAffectingBorderFrame;
+ (id)keyPathsForValuesAffectingContentFrameForSeamlessOpening;
+ (id)keyPathsForValuesAffectingContentFrame;
+ (id)keyPathsForValuesAffectingDisplayState;
+ (id)potentialExpectedDisplayBundleIDsForPreview:(id)arg1;
+ (id)keyPathsForValuesAffectingIsWindowKey;
+ (id)keyPathsForValuesAffectingHidePlayControl;
+ (id)keyPathsForValuesAffectingNeedsVolumeControl;
@property(retain) DMFApplicationPolicyMonitor *screentimeApplicationPolicyMonitor; // @synthesize screentimeApplicationPolicyMonitor=_screentimeApplicationPolicyMonitor;
@property(retain) DMFCategoryPolicyMonitor *screentimeCategoryPolicyMonitor; // @synthesize screentimeCategoryPolicyMonitor=_screentimeCategoryPolicyMonitor;
@property long long currentScreentimePolicy; // @synthesize currentScreentimePolicy=_currentScreentimePolicy;
@property(retain) NSArray *invalidModes; // @synthesize invalidModes=_invalidModes;
@property(retain) QLPreview *preview; // @synthesize preview=_preview;
@property BOOL documentDirty; // @synthesize documentDirty=_documentDirty;
@property BOOL inMarkup; // @synthesize inMarkup=_inMarkup;
@property(retain) QLDisplayBundleViewController *qlViewController; // @synthesize qlViewController=_qlViewController;
@property(retain) NSUUID *operationUUID; // @synthesize operationUUID=_operationUUID;
@property(retain) id <QLDisplayBundleOwner> owner; // @synthesize owner=_owner;
@property(nonatomic) int visibility; // @synthesize visibility=_visibility;
@property(readonly, copy) NSString *description;
- (void)endOperation:(id)arg1;
- (void)beginOperation:(id)arg1;
- (id)operationName;
- (void)debugPreview:(id)arg1;
- (BOOL)validateURLSecureAccess:(id)arg1;
@property(readonly) BOOL allowsOpeningFileURLs;
@property(readonly) BOOL allowsFileAccess;
@property(readonly) BOOL allowsPlugIns;
@property(readonly) BOOL allowsJavascript;
@property(readonly) BOOL allowsNetworkAccess;
- (BOOL)isSafe;
- (BOOL)shouldShowPagesOnLeft;
@property(readonly) BOOL shouldPreserveAspectRatioWhenResizing;
- (void)_saveScreenshotWithKey:(id)arg1;
- (BOOL)drawPage:(unsigned long long)arg1 inRect:(struct CGRect)arg2 context:(struct CGContext *)arg3;
- (double)thumbnailAspectRatioForPage:(unsigned long long)arg1;
- (BOOL)generateThumbnailForPage:(unsigned long long)arg1 maxSize:(struct CGSize)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (struct CGImage *)copyImageRepresentationWithFrame:(struct CGRect *)arg1;
- (void)getImageRepresentationWithFrame:(struct CGRect)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly) BOOL pathBarShouldOverlay;
@property(readonly) BOOL allowsAlerts;
- (void)openExternalURL:(id)arg1;
- (BOOL)shouldOpenExternalURL:(id)arg1;
@property(readonly) NSDictionary *openingApplicationInfo;
@property(readonly) NSURL *launchURL;
- (void)setFocusedOccurrenceIndex:(unsigned long long)arg1 inPage:(unsigned long long)arg2;
@property unsigned long long focusedOccurrenceIndex;
@property(retain) NSArray *highlightedOccurrences;
- (id)findOccurrencesOfString:(id)arg1 inPage:(unsigned long long)arg2 withOptions:(unsigned long long)arg3;
- (id)rectsForStringRange:(struct _NSRange)arg1 inPage:(unsigned long long)arg2;
- (struct _NSRange)stringRangeForPage:(unsigned long long)arg1;
- (id)stringForPage:(unsigned long long)arg1;
- (id)pasteboardPropertyListForType:(id)arg1;
- (unsigned long long)writingOptionsForType:(id)arg1 pasteboard:(id)arg2;
- (id)writableTypesForPasteboard:(id)arg1;
- (BOOL)canSelectText;
- (void)selectAll:(id)arg1;
- (void)copy:(id)arg1;
- (BOOL)hasControlAtPoint:(struct CGPoint)arg1;
@property(readonly) BOOL prefersLocalEventLoop;
@property BOOL tracksMouseMovements;
@property(readonly) unsigned long long observedEvents;
- (BOOL)prefersLocalEventLoopForEvent:(id)arg1;
- (BOOL)mustHandleEvent:(id)arg1;
- (BOOL)isClickablePoint:(struct CGPoint)arg1;
- (struct CGPoint)locationForEvent:(id)arg1;
- (id)viewForLocation:(struct CGPoint)arg1;
- (id)viewForEvent:(id)arg1;
- (BOOL)rotateWithEvent:(id)arg1;
- (BOOL)cursorUpdate:(id)arg1;
- (BOOL)endGestureWithEvent:(id)arg1;
- (BOOL)beginGestureWithEvent:(id)arg1;
- (BOOL)smartMagnifyWithEvent:(id)arg1;
- (BOOL)magnifyWithEvent:(id)arg1;
- (BOOL)scrollWheel:(id)arg1;
- (BOOL)hasContentAtLocation:(struct CGPoint)arg1;
- (BOOL)mustHandleDoubleClickAtLocation:(struct CGPoint)arg1;
- (BOOL)mustHandleDragAtLocation:(struct CGPoint)arg1;
- (BOOL)mouseDragged:(id)arg1;
- (BOOL)mouseMoved:(id)arg1;
- (BOOL)mouseUp:(id)arg1;
- (BOOL)mouseDown:(id)arg1;
- (BOOL)keyDown:(id)arg1;
- (BOOL)responder:(id)arg1 shouldHandleEvent:(id)arg2;
- (BOOL)_dispatchEvent:(id)arg1 selector:(SEL)arg2;
@property(readonly) NSResponder *responder;
- (void)rotate:(long long)arg1;
- (void)editOccuredOnPage:(long long)arg1;
- (void)promptSaveForCloseWithCloseHandler:(CDUnknownBlockType)arg1;
@property(readonly) NSURL *shareItemURL;
- (void)revertTrim;
- (void)commitTrim;
- (void)revertMarkup:(CDUnknownBlockType)arg1;
- (void)exitMarkup:(long long)arg1;
- (void)didEnterMarkup;
- (void)enterMarkup;
@property(readonly) NSView *markupControls;
@property(readonly) BOOL rotateSupported;
@property(readonly) BOOL markupSupported;
- (void)saveModeDidChange;
@property(readonly) NSTouchBar *touchBar;
@property(readonly) BOOL supportsZoomActions;
- (void)zoomWithAction:(long long)arg1;
@property BOOL autoZooms;
@property double zoomFactor;
@property struct CGPoint focusPoint;
@property(readonly) double zoomFactorToFitWidth;
@property(readonly) double maxZoomFactor;
@property(readonly) BOOL hasZooming;
@property double currentHorizontalScroll;
@property(readonly) double totalHorizontalScroll;
@property double currentScroll;
@property(readonly) double totalScroll;
@property(readonly) BOOL hasScrolling;
@property(readonly) double contentOffsetForScroller;
@property(readonly) struct CGSize displayPageSize;
@property(readonly) double defaultPageThumbnailRatio;
@property(readonly) BOOL showScrollerToChangePages;
@property(readonly) int pageDisplay;
@property unsigned long long currentPage;
@property(readonly) unsigned long long numberOfPages;
@property(readonly) BOOL hasPages;
@property float volume;
@property BOOL muted;
@property(readonly) BOOL hasAudio;
@property(readonly) BOOL playedToTheEnd;
@property double currentTime;
@property double seekTolerance;
@property(readonly) double duration;
@property BOOL playing;
@property(readonly) BOOL autoplay;
- (BOOL)isExporting;
- (BOOL)isTrimming;
- (void)beginTrim;
@property(readonly) BOOL trimmingSupported;
@property(readonly) BOOL hasTime;
@property(readonly) BOOL showCompactPlayControl;
@property(readonly) BOOL delegatesControls;
- (id)categoryForScreentime;
- (id)bundleIDForScreentime;
- (void)presentScreenTimeLockout:(BOOL)arg1 withScreentimeID:(id)arg2;
- (void)checkScreenTimePolicy;
- (void)endWatchingScreenTimePolicy;
- (void)startWatchingScreenTimePolicy;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)layoutSublayersOfLayer:(id)arg1;
@property(readonly) BOOL scalable;
@property(readonly) BOOL guessedOptimalSize;
@property(readonly) BOOL fullyLoaded;
@property(readonly) int navigationControls;
@property(readonly) NSDictionary *sizingConstraints;
@property(readonly) struct CGRect borderFrame;
- (struct CGRect)contentViewBorderFrame;
@property(readonly) struct CGRect contentFrameForSeamlessOpening;
@property(readonly) struct CGRect opaqueFrame;
@property(readonly) struct CGRect contentFrame;
@property(readonly) double backingScaleFactor;
@property struct CGRect quickLookFrame;
- (void)drawBubbleBackgroundInFrame:(struct CGRect)arg1 contentFrame:(struct CGRect)arg2;
@property(readonly) BOOL shouldDrawBubbleBackground;
- (void)drawHighlights:(id)arg1 inContext:(struct CGContext *)arg2 style:(int)arg3;
- (void)drawFlavorInBackgroundLayer:(id)arg1 foregroundLayer:(id)arg2 contentSize:(struct CGSize)arg3 maxSize:(struct CGSize)arg4 parts:(struct CGRect (*)[7])arg5;
@property(readonly) int flavor;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)windowKeyDidChange;
- (void)windowDidChange;
- (void)hostedInWindowServerDidChange;
- (void)backingScaleFactorDidChange;
- (void)updateProperties:(CDUnknownBlockType)arg1;
- (void)previewStatusDidChange;
- (void)modeDidChange;
@property(readonly) BOOL hasHorizontalScroller;
@property(readonly) BOOL keepThumbnailUnderInlinePreview;
- (void)setOverlayControlOverlayFrame:(struct CGRect)arg1 rollOverFrame:(struct CGRect)arg2;
- (void)showOverlayControls:(BOOL)arg1 withOverlayController:(id)arg2;
@property(readonly) BOOL shouldShowInlinePreviewContent;
@property(readonly) BOOL shouldShowInlinePreviewControls;
@property(readonly) unsigned long long overlayVisibilityOptions;
@property(readonly) int backgroundStyle;
@property(readonly) int mode;
@property BOOL highlighted;
@property(retain) id displayState;
@property(readonly) BOOL viewUsesLayer;
@property(readonly) BOOL opaque;
@property(readonly) BOOL isDisplayingError;
@property(readonly) BOOL needsTimeControl;
@property(readonly) BOOL canShowOpenButton;
@property(readonly) BOOL canShowTitleInBubble;
@property(readonly) NSString *displayNameComplement;
@property(readonly) NSString *customDisplayName;
- (id)customDisplayNameWithLongForm:(BOOL)arg1;
- (BOOL)hasDisplayFlag:(int)arg1;
@property(readonly) int disabledDisplayFlags;
@property(readonly) int additionalDisplayFlags;
@property(readonly) int displayFlags;
- (void)set_QLBundleAppearance:(id)arg1;
@property(readonly) NSView *dragContentView;
@property(readonly) CALayer *contentLayer;
@property(readonly) CALayer *quickLookLayer;
@property(readonly) QLDisplayBundleViewController *quickLookViewController;
@property(readonly) NSView *quickLookView;
- (id)quickLookContentView;
- (void)refreshSynchronously;
- (void)didOpen;
- (void)willOpen;
- (void)didHide;
- (void)willHide;
- (void)didShow;
- (void)willShow;
- (void)_stopObservingOwner;
- (void)_startObservingOwner;
- (void)cleanup;
- (void)discard;
- (void)deactivate;
- (void)activate;
@property(readonly) BOOL deactivated;
@property(readonly) BOOL activated;
@property(readonly) int activationState;
- (void)customTitleUpdated;
- (void)sizingUpdated;
- (void)reloadAndFallbackWithError:(id)arg1;
- (void)didDesistRemoteWithExpectedDisplayBundleID:(id)arg1;
- (void)didFailLoadingWithError:(id)arg1;
- (void)didMismatchLoadingWithHints:(id)arg1 expectedDisplayBundleID:(id)arg2;
- (void)didLoad;
- (BOOL)isValidInPreviewMode:(int)arg1;
@property(readonly) BOOL canBeReused;
@property(readonly) BOOL isWindowKey;
@property(readonly) BOOL isRemote;
@property(readonly) BOOL isLoaded;
- (void)willTimeOut;
- (void)cancelLoading;
- (int)loadWithHints:(id)arg1;
- (void)discardAccessoryControllers;
- (BOOL)showAccessoryController:(id)arg1;
- (void)_bindedWindowWillClose:(id)arg1;
- (void)_unbindWindowController:(id)arg1;
- (void)_discardBoundWindowControllers;
- (void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3;
@property(readonly) NSURL *URL;
@property(readonly, retain) id <QLPreviewItem> previewItem;
@property(readonly) NSString *displayBundleID;
- (void)dealloc;
- (id)initWithPreview:(id)arg1 owner:(id)arg2;
- (struct CGRect)frameForUIElementWithIdentifier:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (id)accessibilityAttributeValue:(id)arg1 forUIElementWithIdentifier:(id)arg2;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
@property(readonly) NSDictionary *accessibilityUIElements;
- (BOOL)accessibilityIsIgnored;
@property(readonly) BOOL hidePlayControl;
@property BOOL showRemainingTime;
@property(readonly) BOOL needsVolumeControl;

// Remaining properties
@property(readonly) id accessibilityFocusedUIElement;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property int inputFocusType;
@property(readonly) Class superclass;

@end

