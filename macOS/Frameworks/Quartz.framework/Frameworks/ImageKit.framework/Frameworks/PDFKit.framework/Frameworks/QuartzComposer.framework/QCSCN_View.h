//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <AppKit/NSView.h>

#import <QuartzComposer/QCSCN_SceneRenderer-Protocol.h>

@class NSColor, NSOpenGLContext, NSOpenGLPixelFormat, NSString, QCSCN_Node, QCSCN_Scene;
@protocol QCSCN_SceneRendererDelegate;

__attribute__((visibility("hidden")))
@interface QCSCN_View : NSView <QCSCN_SceneRenderer>
{
    id _reserved;
}

+ (int)_baseTypeForProperty:(id)arg1;
+ (Class)typeForProperty:(id)arg1;
+ (BOOL)isKeyExcludedFromWebScript:(const char *)arg1;
+ (id)propertyKeys;
+ (BOOL)isSelectorExcludedFromWebScript:(SEL)arg1;
+ (void)initialize;
+ (id)defaultPixelFormat;
+ (id)defaultPixelFormatWithSampleCount:(unsigned long long)arg1;
- (id)propertyKeys;
- (void)pause;
- (void)stop;
- (void)play;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)unbind:(id)arg1;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (Class)valueClassForBinding:(id)arg1;
- (void)__renderer:(id)arg1 didRenderScene:(id)arg2 atTime:(double)arg3;
- (void)__renderer:(id)arg1 willRenderScene:(id)arg2 atTime:(double)arg3;
- (void)jitterRedisplayInBackingLayerWithCGLContext:(struct _CGLContextObject *)arg1;
@property(nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
- (void)jitter:(id)arg1;
- (void)restartJittering;
- (void)stopJitteringIfNeeded;
- (void)stopJittering;
- (void)jitterFromSecondaryThread;
- (void)_jitter;
- (void)unlockJittering;
- (void)lockJittering;
- (BOOL)jitteringEnabled;
- (BOOL)jitteringSupported;
- (void)_willDrawForJittering;
- (BOOL)_canJitter;
- (struct _CGLContextObject *)jitteringCGLContext;
- (id)jitteringLayer;
- (void)_jitterRedisplay:(struct _CGLContextObject *)arg1;
@property(nonatomic) BOOL autoenablesDefaultLighting;
- (void)setEnableDefaultLight:(BOOL)arg1;
- (BOOL)enableDefaultLight;
- (void)setRendererID:(id)arg1;
- (id)rendererID;
@property(readonly, nonatomic) void *context;
@property(retain, nonatomic) NSOpenGLContext *openGLContext;
- (id)_privateOpenGLContext;
- (void)_openGLContextDidChange;
- (void)_setupGLContext:(id)arg1;
- (void)clearGLContext;
- (id)_getPixelFormat;
@property(retain, nonatomic) NSOpenGLPixelFormat *pixelFormat;
- (void)unlock;
- (void)lock;
- (void)keyDown:(id)arg1;
- (void)testHitTest:(id)arg1;
- (void)_sceneDidUpdate:(id)arg1;
- (void)_systemTimeAnimationStarted:(id)arg1;
- (BOOL)hasFocus;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (void)rotateWithEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)defaultDoubleClickAction:(int)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)rotateOf:(double)arg1;
- (double)zoomFactor;
- (void)setZoomFactor:(double)arg1;
- (void)switchToNextCamera;
- (void)switchToCameraNamed:(id)arg1;
- (BOOL)autoAdjustCamera;
- (void)setAutoAdjustCamera:(BOOL)arg1;
- (BOOL)autoAdjustClippingPlanes;
- (void)setAutoAdjustClippingPlanes:(BOOL)arg1;
- (void)resetBrowseMode;
- (BOOL)allowsBrowsing;
- (void)setAllowsBrowsing:(BOOL)arg1;
@property(nonatomic) BOOL allowsCameraControl;
- (void)setEventHandler:(id)arg1;
- (id)eventHandler;
@property(getter=isPlaying) BOOL playing;
- (void)stop:(id)arg1;
- (void)pause:(id)arg1;
- (void)play:(id)arg1;
@property(nonatomic) BOOL loops;
@property(readonly, copy) NSString *description;
@property(copy, nonatomic) NSColor *backgroundColor;
- (void)_setBackgroundColor:(id)arg1;
@property(nonatomic) double currentTime;
- (void)setClearViewportWhenDrawing:(BOOL)arg1;
- (BOOL)clearViewportWhenDrawing;
@property(retain, nonatomic) QCSCN_Node *pointOfView;
- (void)setPointOfView:(id)arg1 animate:(BOOL)arg2;
- (void)_setPointOfView:(id)arg1;
@property(retain, nonatomic) QCSCN_Scene *scene;
- (void)_setScene:(id)arg1;
- (void *)__CFObject;
- (void)_loadScene:(id)arg1;
- (void)_notifyAsynchLoadingDidEnd:(id)arg1;
- (void)_notifyAsynchLoadingWillStart:(id)arg1;
- (void)_notifyLoading:(id)arg1;
- (void)removeLoadingLayer;
- (void)installLoadingLayer;
- (void)setFrame:(struct CGRect)arg1;
- (id)renderer;
- (id)hitTest:(struct CGPoint)arg1 options:(id)arg2;
- (struct CGRect)boundsInPixels;
- (void)setNeedsDisplay:(BOOL)arg1;
- (void)renewGState;
- (void)drawRect:(struct CGRect)arg1;
- (void)_draw;
- (void)draw;
- (void)drawInBackingLayerWithCGLContext:(struct _CGLContextObject *)arg1;
- (void)_drawInCGLContext:(struct _CGLContextObject *)arg1;
- (void)_installViewport:(void *)arg1;
- (void)clearBuffers:(struct _CGLContextObject *)arg1;
- (BOOL)hasSystemTimeAnimationRuning;
- (BOOL)wantsBestResolutionOpenGLSurface;
- (void)_surfaceNeedsUpdate:(id)arg1;
- (void)reshape;
- (void)update;
- (void)prepareOpenGL;
- (BOOL)lockFocusIfCanDraw;
- (BOOL)isOpaque;
- (id)contentLayer;
- (id)makeBackingLayer;
- (void)setWantsLayer:(BOOL)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)windowChangedScreen:(id)arg1;
- (void)_commonInit:(id)arg1;
- (BOOL)usesDisplayLink;
- (BOOL)shouldForceFixedPipeline;
- (void)_setNeedsDisplay;
- (void)_setupDisplayLink;
- (int)_displayLinkCallback:(const CDStruct_e50ab651 *)arg1;
- (void)_timerCallback:(id)arg1;
- (void)_stopRepetitiveDisplayIfPossible;
- (BOOL)_shouldRedraw;
- (int)__setupDisplayLink;
- (void)_setDirtyFlag:(BOOL)arg1;
- (BOOL)_dirtyFlag;
- (void)setAsynchronousLoading:(BOOL)arg1;
- (BOOL)asychronousLoading;
@property(nonatomic) id <QCSCN_SceneRendererDelegate> delegate;
- (void)finalize;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 options:(id)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_startRepetitiveDisplay;
- (void)_stopRepetitiveDisplay;
- (void)_stopDisplayLink;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

