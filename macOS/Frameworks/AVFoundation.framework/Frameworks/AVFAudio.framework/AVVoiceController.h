//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

@class AVAudioFormat, NSDictionary, NSString;
@protocol AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, Endpointer;

@interface AVVoiceController : NSObject
{
    void *_impl;
}

- (void)setRecordStatusChangeBlock:(CDUnknownBlockType)arg1;
- (float)getAveragePowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (float)getPeakPowerForStream:(unsigned long long)arg1 forChannel:(unsigned long long)arg2;
- (BOOL)updateMeterForStream:(unsigned long long)arg1;
- (BOOL)isMeteringEnabledForStream:(unsigned long long)arg1;
- (id)getRecordSettingsForStream:(unsigned long long)arg1;
- (double)getRecordBufferDurationForStream:(unsigned long long)arg1;
- (BOOL)playAlertSoundForType:(int)arg1 overrideMode:(long long)arg2;
- (void)playAlert:(int)arg1 withOverride:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)setContextForStream:(id)arg1 forStream:(unsigned long long)arg2 error:(id *)arg3;
- (long long)getCurrentSessionState;
- (void)deactivateAudioSessionWithOptions:(unsigned long long)arg1;
- (BOOL)activateAudioSessionForStream:(unsigned long long)arg1 isPrewarm:(BOOL)arg2 error:(id *)arg3;
- (id)getRecordDeviceInfoForStream:(unsigned long long)arg1;
- (long long)getCurrentStreamState:(unsigned long long)arg1;
- (BOOL)stopRecordForStream:(unsigned long long)arg1 error:(id *)arg2;
- (void)stopRecordOnStream:(unsigned long long)arg1 completion:(CDUnknownBlockType)arg2;
- (BOOL)startRecordForStream:(id)arg1 error:(id *)arg2;
- (void)startRecordWithSettings:(id)arg1 completion:(CDUnknownBlockType)arg2 alertCompletion:(CDUnknownBlockType)arg3 audioCallback:(CDUnknownBlockType)arg4;
- (BOOL)prepareRecordForStream:(id)arg1 error:(id *)arg2;
- (void)prepareRecordForStream:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (unsigned long long)setContext:(id)arg1 error:(id *)arg2;
- (id)initWithError:(id *)arg1;
- (id)currentRecordDeviceInfo;
@property(readonly) NSDictionary *metrics;
@property(getter=isStopOnEndpointEnabled) BOOL stopOnEndpointEnabled;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)updateMeters;
@property(getter=isMeteringEnabled) BOOL meteringEnabled;
@property float playbackVolume;
@property float alertVolume;
@property(readonly, getter=isRecording) BOOL recording;
@property(readonly, getter=isPlaying) BOOL playing;
- (BOOL)setPlaybackBufferDuration:(double)arg1;
- (double)getPlaybackBufferDuration;
@property(readonly) NSDictionary *playbackSettings;
@property id <AVVoiceControllerPlaybackDelegate> playbackDelegate; // @dynamic playbackDelegate;
@property double recordEndWaitTime;
@property double recordInterspeechWaitTime;
@property double recordStartWaitTime;
@property int recordEndpointMode;
@property(retain) id <Endpointer> endpointerDelegate;
- (BOOL)setRecordBufferDuration:(double)arg1;
- (double)getRecordBufferDuration;
@property(readonly) NSDictionary *recordSettings;
@property id <AVVoiceControllerRecordDelegate> recordDelegate; // @dynamic recordDelegate;
- (void)stopPlaying;
- (BOOL)startPlaying;
- (BOOL)preparePlaybackFromURL:(id)arg1 error:(id *)arg2;
- (BOOL)preparePlaybackWithSettings:(id)arg1 error:(id *)arg2;
- (void)stopRecording;
- (BOOL)startRecordingWithSettings:(id)arg1 error:(id *)arg2;
- (BOOL)startRecordingAtTime:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)startRecording:(id *)arg1;
- (BOOL)startRecording;
- (void)setupAlertBehavior:(id)arg1;
- (int)doStartRecordingAtTime:(unsigned long long)arg1 behavior:(id)arg2;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (void)resetEndpointer;
- (BOOL)playAlertSoundForType:(int)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (BOOL)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;
- (BOOL)setCurrentContext:(id)arg1 error:(id *)arg2;
- (BOOL)IsDeviceAvailableInLocalRoute:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (void)finalize;
- (id)initWithRecordDevice:(id)arg1 error:(id *)arg2;
- (id)initWithContext:(id)arg1 error:(id *)arg2;
- (void)alertPlaybackFinishedOfType:(int)arg1;
- (void)decodeError;
- (void)finishedPlaying;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer *)arg1;
- (void)beganPlaying;
- (void)encodeError;
- (void)endpointDetected;
- (void)interspeechPointDetected;
- (void)startpointDetected;
- (void)finishedRecording:(id)arg1;
- (void)beganRecording:(id)arg1;
- (int)setRecordDevice:(unsigned int)arg1;
- (int)setRecordDeviceFromDeviceUID:(id)arg1;
- (void)handleDeviceChange:(unsigned int)arg1;
- (void)handlePluginDidUnpublishDevice:(id)arg1 withDevice:(id)arg2;
- (void)handlePluginDidPublishDevice:(id)arg1 withDevice:(id)arg2;
- (struct ControllerImpl *)impl;
@property(readonly) unsigned long long numberOfChannels;
@property(setter=setDuckOthersOption:) BOOL duckOthersOption;
@property(readonly) AVAudioFormat *pcmRecordBufferFormat;
@property(getter=isSynchronousCallbackEnabled) BOOL synchronousCallbackEnabled;
@property(getter=isStopOnBargeInEnabled) BOOL stopOnBargeInEnabled;
@property(getter=isBargeInDetectEnabled) BOOL bargeInDetectEnabled;
@property(readonly) NSDictionary *voiceTriggerInfo;
@property(readonly) unsigned long long lastRecordStartTime;
@property(readonly, copy) NSString *playbackRoute;
@property(readonly, copy) NSString *recordRoute;
- (void)sendRemoteConnectionMessage:(id)arg1;

@end

