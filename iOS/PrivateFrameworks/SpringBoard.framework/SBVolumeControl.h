//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <SpringBoard/PTSettingsKeyObserver-Protocol.h>
#import <SpringBoard/SBAVSystemControllerCacheObserver-Protocol.h>
#import <SpringBoard/SBVolumeHUDViewControllerDelegate-Protocol.h>

@class NSMutableSet, NSString, SBAVSystemControllerCache, SBHUDController, SBRingerControl, SBVolumeHUDSettings;
@protocol OS_dispatch_queue;

@interface SBVolumeControl : NSObject <SBVolumeHUDViewControllerDelegate, PTSettingsKeyObserver, SBAVSystemControllerCacheObserver>
{
    SBHUDController *_hudController;
    SBVolumeHUDSettings *_volumeHUDSettings;
    SBRingerControl *_ringerControl;
    _Bool _debounce;
    unsigned long long _mode;
    NSMutableSet *_alwaysHiddenCategories;
    NSString *_lastEventCategory;
    _Bool _hudHandledLastVolumeChange;
    _Bool _euDevice;
    _Bool _userAcknowledgedEUVolumeLimit;
    _Bool _lastVolumeChangedWasBlocked;
    _Bool _volumeDownButtonIsDown;
    _Bool _volumeUpButtonIsDown;
    _Bool _controlCenterIsPresented;
    struct os_unfair_lock_s _effectiveVolumeLock;
    float _effectiveVolume;
    float _rawVolume;
    NSObject<OS_dispatch_queue> *_avSystemControllerQueue;
    SBAVSystemControllerCache *_avCache;
    int _darwinNotificationToken;
    NSString *_lastDisplayedCategory;
}

+ (_Bool)_isVolumeChangeAllowedForState:(id)arg1 error:(out id *)arg2;
+ (id)sharedInstance;
@property(readonly, nonatomic) NSString *lastDisplayedCategory; // @synthesize lastDisplayedCategory=_lastDisplayedCategory;
- (void).cxx_destruct;
- (void)cache:(id)arg1 didUpdateActiveAudioRoute:(id)arg2;
- (void)_updateEUVolumeSettings;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (void)volumeHUDViewControllerRequestsDismissal:(id)arg1;
- (void)_dispatchAVSystemControllerSync:(CDUnknownBlockType)arg1;
- (void)_dispatchAVSystemControllerAsync:(CDUnknownBlockType)arg1;
- (id)avSystemControllerDispatchQueue;
- (void)_resetMediaServerConnection;
- (void)_serverConnectionDied:(id)arg1;
- (void)_effectiveVolumeChanged:(id)arg1;
- (_Bool)_isVolumeHUDVisibleOrFading;
- (_Bool)_isVolumeHUDVisible;
- (void)_presentVolumeHUDWithVolume:(float)arg1;
- (id)_configureVolumeHUDViewControllerWithVolume:(float)arg1;
- (_Bool)_turnOnScreenIfNecessaryForEULimit:(_Bool)arg1;
- (float)_calcButtonRepeatDelay;
- (void)changeVolumeByDelta:(float)arg1;
- (void)_userAcknowledgedEUEnforcement:(float)arg1;
- (_Bool)_HUDIsDisplayableForCategory:(id)arg1;
- (_Bool)_isCategoryAlwaysHidden:(id)arg1;
- (float)_volumeStepUp:(_Bool)arg1;
- (void)_sendEUVolumeLimitAcknowledgementIfNecessary;
- (void)_controlCenterDidDismiss:(id)arg1;
- (void)_controlCenterWillPresent:(id)arg1;
- (float)getMediaVolume;
- (void)setMediaVolume:(float)arg1;
- (_Bool)userHasAcknowledgedEUVolumeLimit;
- (id)acquireVolumeHUDHiddenAssertionForReason:(id)arg1;
- (void)hideVolumeHUDIfVisible;
- (id)onscreenSuperGreatVolumeHUDViewController;
- (void)clearAlwaysHiddenCategories;
- (void)removeAlwaysHiddenCategory:(id)arg1;
@property(readonly, nonatomic) _Bool headphonesPresent;
- (void)cancelVolumeEvent;
- (void)handleVolumeButtonWithType:(long long)arg1 down:(_Bool)arg2;
- (void)decreaseVolume;
- (void)increaseVolume;
@property(readonly, nonatomic) NSString *activeAudioRoute;
- (void)setVolume:(float)arg1 forCategory:(id)arg2;
- (void)_updateEffectiveVolume:(float)arg1;
- (float)_effectiveVolume;
- (void)toggleMute;
- (void)addAlwaysHiddenCategory:(id)arg1;
- (float)euVolumeLimit;
- (_Bool)isEUVolumeLimitEnforced;
- (_Bool)isEUDevice;
- (_Bool)isEUVolumeLimitEnabled;
- (_Bool)wouldShowAtLeastAYellowWarningForVolume:(float)arg1;
- (float)volumeStepDown;
- (float)volumeStepUp;
- (id)initWithHUDController:(id)arg1 ringerControl:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

