//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <SiriActivation/AFMyriadDelegate-Protocol.h>
#import <SiriActivation/SASBulletinManagerDelegate-Protocol.h>
#import <SiriActivation/SASHeaterDelegate-Protocol.h>
#import <SiriActivation/SASLockStateMonitorDelegate-Protocol.h>
#import <SiriActivation/SASRequestOptionsBuilderDataSource-Protocol.h>

@class AFMyriadCoordinator, AFPreferences, AFSiriTether, AFWatchdogTimer, NSMutableDictionary, NSMutableSet, NSString, SASBulletinManager, SASHeater, SASLockStateMonitor, SASRemoteRequestManager, SASSystemState, SASTestingInputController;
@protocol OS_dispatch_queue;

@interface SiriActivationService : NSObject <SASRequestOptionsBuilderDataSource, SASHeaterDelegate, AFMyriadDelegate, SASLockStateMonitorDelegate, SASBulletinManagerDelegate>
{
    CDUnknownBlockType _buttonTrigger;
    _Bool _activationHandled;
    int _voiceTriggerNotifyToken;
    AFMyriadCoordinator *_myriad;
    NSObject<OS_dispatch_queue> *_voiceTriggerDispatchQueue;
    NSObject<OS_dispatch_queue> *_watchdogQueue;
    _Bool _xcTestingActive;
    _Bool _siriTetherIsAttached;
    _Bool _preheated;
    _Bool _voiceTriggerNotifyTokenIsValid;
    _Bool _buttonDownHasOccurredSinceActivation;
    SASSystemState *_systemState;
    AFPreferences *_afPreferences;
    SASLockStateMonitor *_lockStateMonitor;
    NSMutableDictionary *_presentations;
    NSMutableSet *_activePresentations;
    NSMutableDictionary *_preparingPresentations;
    long long _requestState;
    SASHeater *_heater;
    AFSiriTether *_siriTether;
    double _preparationTimestamp;
    double _activationTimestamp;
    SASBulletinManager *_bulletinManager;
    SASRemoteRequestManager *_remoteRequestManager;
    SASTestingInputController *_testingInputController;
    AFWatchdogTimer *_activationTimer;
    AFWatchdogTimer *_dismissalTimer;
    NSMutableDictionary *_avExternalButtonEvents;
}

+ (id)new;
+ (id)service;
@property(nonatomic) _Bool buttonDownHasOccurredSinceActivation; // @synthesize buttonDownHasOccurredSinceActivation=_buttonDownHasOccurredSinceActivation;
@property(retain, nonatomic) NSMutableDictionary *avExternalButtonEvents; // @synthesize avExternalButtonEvents=_avExternalButtonEvents;
@property(retain, nonatomic) AFWatchdogTimer *dismissalTimer; // @synthesize dismissalTimer=_dismissalTimer;
@property(retain, nonatomic) AFWatchdogTimer *activationTimer; // @synthesize activationTimer=_activationTimer;
@property(retain, nonatomic) SASTestingInputController *testingInputController; // @synthesize testingInputController=_testingInputController;
@property(retain, nonatomic) SASRemoteRequestManager *remoteRequestManager; // @synthesize remoteRequestManager=_remoteRequestManager;
@property(retain, nonatomic) SASBulletinManager *bulletinManager; // @synthesize bulletinManager=_bulletinManager;
@property(nonatomic) _Bool voiceTriggerNotifyTokenIsValid; // @synthesize voiceTriggerNotifyTokenIsValid=_voiceTriggerNotifyTokenIsValid;
@property(nonatomic) _Bool preheated; // @synthesize preheated=_preheated;
@property(nonatomic) double activationTimestamp; // @synthesize activationTimestamp=_activationTimestamp;
@property(nonatomic) double preparationTimestamp; // @synthesize preparationTimestamp=_preparationTimestamp;
@property(nonatomic) _Bool siriTetherIsAttached; // @synthesize siriTetherIsAttached=_siriTetherIsAttached;
@property(retain, nonatomic) AFSiriTether *siriTether; // @synthesize siriTether=_siriTether;
@property(retain, nonatomic) SASHeater *heater; // @synthesize heater=_heater;
@property(nonatomic) long long requestState; // @synthesize requestState=_requestState;
@property(retain, nonatomic) NSMutableDictionary *preparingPresentations; // @synthesize preparingPresentations=_preparingPresentations;
@property(retain, nonatomic) NSMutableSet *activePresentations; // @synthesize activePresentations=_activePresentations;
@property(retain, nonatomic) NSMutableDictionary *presentations; // @synthesize presentations=_presentations;
@property(nonatomic) _Bool xcTestingActive; // @synthesize xcTestingActive=_xcTestingActive;
@property(retain, nonatomic) SASLockStateMonitor *lockStateMonitor; // @synthesize lockStateMonitor=_lockStateMonitor;
@property(retain, nonatomic) AFPreferences *afPreferences; // @synthesize afPreferences=_afPreferences;
@property(retain, nonatomic) SASSystemState *systemState; // @synthesize systemState=_systemState;
- (void).cxx_destruct;
- (void)bulletinManagerDidChangeBulletins:(id)arg1;
- (void)markBulletinWithIdentifier:(id)arg1 asRead:(_Bool)arg2;
- (id)bulletinForIdentifier:(id)arg1;
- (id)bulletinsOnLockScreen;
- (id)allBulletins;
- (void)stopDismissalWatchdogTimerIfNeeded;
- (void)startDismissalWatchdogTimer;
- (void)stopActivationWatchdogTimerIfNeeded;
- (void)startActivationWatchdogTimerForPresentationServer:(id)arg1;
- (void)didChangeLockState:(unsigned long long)arg1;
- (void)shouldContinue:(id)arg1;
- (void)shouldAbortAnotherDeviceBetter:(id)arg1;
- (void)_unregisterForVoiceTrigger;
- (void)_registerForVoiceTrigger;
- (oneway void)activationRequestFromTestRunnerWithContext:(id)arg1;
- (void)heaterSuggestsPreheating:(id)arg1;
- (void)heaterSuggestsDefrosting:(id)arg1;
- (_Bool)_isInitialRequest;
- (unsigned long long)requestOptionsBuilder:(id)arg1 currentLockStateForActivation:(id)arg2;
- (id)requestOptionsBuilder:(id)arg1 overriddenPresentationIdentifierForCurrentPresentationIdentifier:(long long)arg2 withActivation:(id)arg3;
- (id)requestOptionsBuilder:(id)arg1 optionsForOverriding:(id)arg2 withActiviation:(id)arg3;
- (id)requestOptionsBuilder:(id)arg1 uiPresentationIdentifierWithActivation:(id)arg2 activationPresentation:(long long)arg3;
- (_Bool)requestOptionsBuilder:(id)arg1 isAcousticIdAllowedWithActiviation:(id)arg2;
- (_Bool)requestOptionsBuilder:(id)arg1 isPredictedRecordRouteIsZLLWithActiviation:(id)arg2;
- (_Bool)requestOptionsBuilder:(id)arg1 isRequestInitialWithActiviation:(id)arg2;
- (_Bool)requestOptionsBuilder:(id)arg1 shouldRequestUseAutomaticEndpointingWithActiviation:(id)arg2;
- (_Bool)_siriIsEnabled;
- (void)_cancelPendingActivationEventWithReason:(unsigned long long)arg1;
- (void)_cancelActivationPreparationForSetup;
- (void)_cancelActivationPreparationIfNecessary;
- (void)_attachToTether;
- (void)_preheat;
- (void)_cancelTTS;
- (void)_dismissSiri:(id)arg1;
- (void)_activatePresentation:(id)arg1 requestOptions:(id)arg2 analyticsContext:(id)arg3;
- (void)dismissSiriWithOptions:(id)arg1;
- (_Bool)handleActivationRequest:(id)arg1 systemState:(id)arg2;
- (_Bool)handleActivationRequest:(id)arg1;
- (void)activationRequestFromTestingWithContext:(id)arg1;
- (void)activationRequestFromVoiceTrigger;
- (void)activationRequestFromSpotlightWithContext:(id)arg1;
- (void)activationRequestFromSimpleActivation:(long long)arg1;
- (void)activationRequestFromBreadcrumb;
- (void)activationRequestFromContinuityWithContext:(id)arg1;
- (void)activationRequestFromDirectActionEvent:(long long)arg1 context:(id)arg2;
- (_Bool)_buttonIsAVExternalButton:(long long)arg1;
- (void)_recordTimeIfNeededForButtonIdentifier:(long long)arg1 buttonDownTimestamp:(double)arg2;
- (void)_handleTapSynthesisIfNeededForButtonIdentifier:(long long)arg1 buttonUpTimestamp:(double)arg2;
- (void)buttonLongPressFromButtonIdentifier:(long long)arg1 context:(id)arg2;
- (void)buttonTapFromButtonIdentifier:(long long)arg1;
- (void)buttonUpFromButtonIdentifier:(long long)arg1 timestamp:(double)arg2;
- (void)buttonDownFromButtonIdentifier:(long long)arg1 timestamp:(double)arg2;
- (void)_performOrEnqueueButtonAction:(CDUnknownBlockType)arg1;
- (void)cancelPrewarmFromButtonIdentifier:(long long)arg1;
- (void)prewarmFromButtonIdentifier:(long long)arg1 longPressInterval:(double)arg2;
- (void)activationRequestFromButtonIdentifier:(long long)arg1 context:(id)arg2;
- (void)siriPresentationFailureWithIdentifier:(long long)arg1 error:(id)arg2;
- (void)siriPresentationDismissedWithIdentifier:(long long)arg1;
- (void)siriPresentationDisplayedWithIdentifier:(long long)arg1;
- (void)unregisterSiriPresentationIdentifier:(long long)arg1;
- (void)registerSiriPresentation:(id)arg1 withIdentifier:(long long)arg2;
- (id)init;
- (id)_init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

